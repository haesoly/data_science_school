
정규식

	* a, X, 9 기본 character들은 정확히 해당 문자와 일치
	* ^ $ * + [] \ | () 등의 특수문자 제외

	* . (마침표) - 어떤 한개의 character와 일치

	* 
\w - 문자 character와 일치 [a-zA-Z0-9_]

	* \W -문자가 아닌것
	* \s- 공백문자와 일치
	* \S- 공백문자가 아닌것
	* \b - 단어와 단어의 경계와 매치된다.
	* \t, \n, \r - tab, newline, return
	* \d - 숫자 character와 일치 [0-9]
	* \D - 숫자가 아닌것
	* ^ = 시작, $ = 끝 각각 문자열의 시작과 끝을 의미
	* \가 붙으면 스페셜한 의미가 없어짐. 예를들어 .는 .자체를 의미 \는 \를 의미
	* ^ -중간에 나오면 not 의미(반전)


반복패턴

	* '+' -> 1번 이상의 패턴이 발생
	* '*' -> 0번 이상의 패턴이 발생
	* ? -> 0 혹은 1번의 패턴이 발생


python re module로 제공

	* search:  첫번째로 패턴을 찾으면 멈춤        match = re.search(r'iii', 'piiig')  print match.group()
	* match:  주어진 문자열의 첫문자열만을 비교하여 패턴이 있는지 확인 (^과 같은 효과)

        re.match(r'[\w.-]+@[\w.-]+', email )

	* findall:  search가 최초로 매칭되는 패턴만 반환한다면, findall은 매칭되는 전체의 패턴을 반환한다

                   리스트 형태로 반환
                   strings = re.findall(r'python', content, re.IGNORECASE)  대문자든 소문자든 구별없이 찾음

	* sub:  주어진 문자열에서 일치하는 모든 패턴을 replace
	* 


               pattern = r'(\d{3})-(\d{4})-(\d{4})'
               replace = r'(\1) \2-\3'
               re.sub(pattern, replace, string, count=0, flags=0)  #flags는 대문자,소문자 구별할 거냐
               count =0이면 모든 패턴 다 바꿈 (=replaceall)
               count =1이면 처음 만난 패턴 1개 바꿈
               count =2이면 처음 만난 패턴 2개 바꿈

	* split: 문자열을 나눠서 리스트 형태로 반환  re.split(r'[:,.*\s]*', a)
	* compile: 동일한 정규표현식을 매번 다시 쓰기 번거로움을 해결

                    email_reg = re.compile(r'[\w.-]+@[\w.-]+')
                    m = email_reg.search('What a nice weather macmath22@gmail.com, test@test.com mina@minas.net')
                    if m:
                        print m.group()

virtualenv:
	* 독립된 파이썬 환경을 만들기 위한 툴
	* 파이썬 다양한 버전으로 이용할 수 있음!


환경 구축 순서:

	1. pip install virtualenv



	1. virtualenv 명령어로, 잘깔렸는지 확인



	1. 원하는 디렉토리로 이동



	1. virtualenv venv 명령어로, venv폴더 만들기



	1. Window os: cd venv/Scripts-> activate 명령어



virtual환경 나가는 방법:
deactivate

버전 확인 명령어:
import numpy
numpy.__version__

버전 지정해서 install:
pip install numpy ==1.11.2

디버깅:
PDB-command line에서 디버깅 하는 tool
PyCharm -GUI 디버깅 tool

step over:함수를 만나면, 함수 밖에서부터 한줄씩 실행
step into: 함수를 만나면 함수안으로 들어감
resume: 다음 breakpoint 까지 모두 실행


_______________________________________-
