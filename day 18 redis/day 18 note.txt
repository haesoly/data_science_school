ASCII 문제 발생-> unicode 사용

unicode 2byte(Table, Code page)  - 글자 그대로 매핑된 값
unicode에서 인코딩된 utf-8 는 한글 3byte  -utf는 멀티바이트 (인코딩 방식)

db에 쓰거나 네트워크로 전송할때는 unicode 값 인코딩 된 결과 씀

\x -> hexa (16진수)

\xea\xb0\x80 메모리 구조
가 (print 문을 만났을때)

가 -> AC00

1010 1100 0000 0000   -> unicode (2 byte)

1110 1010 1011 0000 1000 0000  - utf-8 인코딩 된 결과( 3byte)
e      a    b       0      8     0

default char 지정하면 명시적으로 utf-8 변환안해줘도됨



index,
순방향 index 1,2,3,4,5,
        score 10, 11, 11, 18, 50
역방향 index 1,2,3,4,5
        score 100,90,90,18,11

index 순서나 방향 이 중요
prefix 부분집합이면 인덱스 자동으로 걸림

보통 한 테이블당 3~4개 index사용

mongodb 문서가 잘 되어있음

db.articles.createIndex({'subject':'text'})
text형 index 생성

db.articles.find({'$text' : {'$search' : 'coffee'}})
coffee의 파생된 단어 모두 검색

db.articles.find({'$text' : {'$search' : '"coffee and"'}})
coffee 키워드 or and 키워드 검색

db.articles.find({'$text' : {'$search' : '\"coffee and\"'}})
정확히 "coffee and" 가 들어간 문자열 검색하고 싶을때

db.articles.find({'subject' : {'$regex' : /cof/}})  :python shell에서 사용할때
db.articles.find({'subject' : {'$regex' : 'cof.+'}})   : python code 에서 사용할때

Aggregation-> Transforms

filter-> group -> sort-> limit

각 단계를 stage라고 함

match-> filtering( sql로 치면 where절)

서버에서 파일 받고 싶을대
wget 주소

wanted
cracking the coding interview
150가지 프로그래밍 문제와 해법

 {$sort : {'totalPop' : -1}},
-1 이 내림차순

따옴표 키에는 필요없으나
코드에서 쓸때는 따옴표 다 필요

#trick -count연산
db.zip.aggregate([
             {$group : {_id : '$state', totalPop : {$sum : 1}}}
])
주별로 몇개 있는지 확인가능 (상수만 더함)

first-순서가 첫번째인것
last-순서가 마지막인거
-> sort를 먼저 해야 의미가 있음

push: 는 list 를 만드는거기때문에 중복 원소만듬 (배열로 만듬)
addToSet: 중복 안해서 배열만듬

project: 투영: 쓰거나 안쓰거나 할 수 있다.
이름 바꾸는거

 { $project:
    { _id: 0,   #원래 있던 id없애고
      state: "$_id",   #id를 state로 바꿈
      biggestCity:  { name: "$biggestCity",  pop: "$biggestPop" },
      smallestCity: { name: "$smallestCity", pop: "$smallestPop" }
    }
  }
] )


concat : 문자열 합침
substr: 문자열 분리

HADOOP 중간결과를 디스크에 저장 -> 느림
spark 중간결과를 메모리에 저장 -> 속도 빠름

인메모리 ex) redis
key value, dict, list 형식
단점: 대용량X, 휘발성

redis-cli

set name aaron
get name
set name bob
하면 bob으로 덮어씌움

setex name 10 aaron : 10초동안 aaron이름 유지하라
-> 로그인 세션유지에 사용

setnx name aaron : 아론으로 유지하기

key {dict}
key [hash]
key {set}

lpush 왼쪽으로 추가
rpush 오른쪽으로 추가 (append)

redis에 key 넣어두기
그래서 하드코딩한부분 줄이기
